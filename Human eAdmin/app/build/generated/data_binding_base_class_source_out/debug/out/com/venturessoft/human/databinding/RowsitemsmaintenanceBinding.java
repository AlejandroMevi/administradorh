// Generated by view binder compiler. Do not edit!
package com.venturessoft.human.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.LinearLayoutCompat;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.materialswitch.MaterialSwitch;
import com.google.android.material.textview.MaterialTextView;
import com.venturessoft.human.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class RowsitemsmaintenanceBinding implements ViewBinding {
  @NonNull
  private final LinearLayoutCompat rootView;

  @NonNull
  public final MaterialTextView description;

  @NonNull
  public final MaterialTextView employeenumber;

  @NonNull
  public final LinearLayoutCompat itemHeaderMaintenance;

  @NonNull
  public final MaterialSwitch statusDescripcion;

  private RowsitemsmaintenanceBinding(@NonNull LinearLayoutCompat rootView,
      @NonNull MaterialTextView description, @NonNull MaterialTextView employeenumber,
      @NonNull LinearLayoutCompat itemHeaderMaintenance,
      @NonNull MaterialSwitch statusDescripcion) {
    this.rootView = rootView;
    this.description = description;
    this.employeenumber = employeenumber;
    this.itemHeaderMaintenance = itemHeaderMaintenance;
    this.statusDescripcion = statusDescripcion;
  }

  @Override
  @NonNull
  public LinearLayoutCompat getRoot() {
    return rootView;
  }

  @NonNull
  public static RowsitemsmaintenanceBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static RowsitemsmaintenanceBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.rowsitemsmaintenance, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static RowsitemsmaintenanceBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.description;
      MaterialTextView description = ViewBindings.findChildViewById(rootView, id);
      if (description == null) {
        break missingId;
      }

      id = R.id.employeenumber;
      MaterialTextView employeenumber = ViewBindings.findChildViewById(rootView, id);
      if (employeenumber == null) {
        break missingId;
      }

      LinearLayoutCompat itemHeaderMaintenance = (LinearLayoutCompat) rootView;

      id = R.id.statusDescripcion;
      MaterialSwitch statusDescripcion = ViewBindings.findChildViewById(rootView, id);
      if (statusDescripcion == null) {
        break missingId;
      }

      return new RowsitemsmaintenanceBinding((LinearLayoutCompat) rootView, description,
          employeenumber, itemHeaderMaintenance, statusDescripcion);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
