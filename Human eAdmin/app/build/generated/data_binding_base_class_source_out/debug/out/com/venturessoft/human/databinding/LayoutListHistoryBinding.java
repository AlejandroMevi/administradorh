// Generated by view binder compiler. Do not edit!
package com.venturessoft.human.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.textview.MaterialTextView;
import com.venturessoft.human.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LayoutListHistoryBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final MaterialTextView codigoET;

  @NonNull
  public final MaterialTextView dateandtime;

  @NonNull
  public final MaterialTextView employeeNumber;

  @NonNull
  public final MaterialTextView idEmp;

  @NonNull
  public final MaterialTextView numCia;

  @NonNull
  public final MaterialTextView statusMov;

  @NonNull
  public final LinearLayout tipoMovLinear;

  @NonNull
  public final MaterialTextView typemov;

  private LayoutListHistoryBinding(@NonNull LinearLayout rootView,
      @NonNull MaterialTextView codigoET, @NonNull MaterialTextView dateandtime,
      @NonNull MaterialTextView employeeNumber, @NonNull MaterialTextView idEmp,
      @NonNull MaterialTextView numCia, @NonNull MaterialTextView statusMov,
      @NonNull LinearLayout tipoMovLinear, @NonNull MaterialTextView typemov) {
    this.rootView = rootView;
    this.codigoET = codigoET;
    this.dateandtime = dateandtime;
    this.employeeNumber = employeeNumber;
    this.idEmp = idEmp;
    this.numCia = numCia;
    this.statusMov = statusMov;
    this.tipoMovLinear = tipoMovLinear;
    this.typemov = typemov;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutListHistoryBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutListHistoryBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_list_history, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutListHistoryBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.codigoET;
      MaterialTextView codigoET = ViewBindings.findChildViewById(rootView, id);
      if (codigoET == null) {
        break missingId;
      }

      id = R.id.dateandtime;
      MaterialTextView dateandtime = ViewBindings.findChildViewById(rootView, id);
      if (dateandtime == null) {
        break missingId;
      }

      id = R.id.employeeNumber;
      MaterialTextView employeeNumber = ViewBindings.findChildViewById(rootView, id);
      if (employeeNumber == null) {
        break missingId;
      }

      id = R.id.idEmp;
      MaterialTextView idEmp = ViewBindings.findChildViewById(rootView, id);
      if (idEmp == null) {
        break missingId;
      }

      id = R.id.numCia;
      MaterialTextView numCia = ViewBindings.findChildViewById(rootView, id);
      if (numCia == null) {
        break missingId;
      }

      id = R.id.statusMov;
      MaterialTextView statusMov = ViewBindings.findChildViewById(rootView, id);
      if (statusMov == null) {
        break missingId;
      }

      id = R.id.tipoMovLinear;
      LinearLayout tipoMovLinear = ViewBindings.findChildViewById(rootView, id);
      if (tipoMovLinear == null) {
        break missingId;
      }

      id = R.id.typemov;
      MaterialTextView typemov = ViewBindings.findChildViewById(rootView, id);
      if (typemov == null) {
        break missingId;
      }

      return new LayoutListHistoryBinding((LinearLayout) rootView, codigoET, dateandtime,
          employeeNumber, idEmp, numCia, statusMov, tipoMovLinear, typemov);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
