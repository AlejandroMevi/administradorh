// Generated by view binder compiler. Do not edit!
package com.venturessoft.human.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.venturessoft.human.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LayoutLicenseBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button btnAccept;

  @NonNull
  public final Button btnCancel;

  @NonNull
  public final CheckBox checkTerms;

  @NonNull
  public final TextView dialogTitle;

  @NonNull
  public final LinearLayout linearLayout2;

  @NonNull
  public final TextView txtPolicy;

  @NonNull
  public final TextView txtTerms;

  private LayoutLicenseBinding(@NonNull ConstraintLayout rootView, @NonNull Button btnAccept,
      @NonNull Button btnCancel, @NonNull CheckBox checkTerms, @NonNull TextView dialogTitle,
      @NonNull LinearLayout linearLayout2, @NonNull TextView txtPolicy,
      @NonNull TextView txtTerms) {
    this.rootView = rootView;
    this.btnAccept = btnAccept;
    this.btnCancel = btnCancel;
    this.checkTerms = checkTerms;
    this.dialogTitle = dialogTitle;
    this.linearLayout2 = linearLayout2;
    this.txtPolicy = txtPolicy;
    this.txtTerms = txtTerms;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutLicenseBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutLicenseBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_license, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutLicenseBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnAccept;
      Button btnAccept = ViewBindings.findChildViewById(rootView, id);
      if (btnAccept == null) {
        break missingId;
      }

      id = R.id.btnCancel;
      Button btnCancel = ViewBindings.findChildViewById(rootView, id);
      if (btnCancel == null) {
        break missingId;
      }

      id = R.id.checkTerms;
      CheckBox checkTerms = ViewBindings.findChildViewById(rootView, id);
      if (checkTerms == null) {
        break missingId;
      }

      id = R.id.dialogTitle;
      TextView dialogTitle = ViewBindings.findChildViewById(rootView, id);
      if (dialogTitle == null) {
        break missingId;
      }

      id = R.id.linearLayout2;
      LinearLayout linearLayout2 = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout2 == null) {
        break missingId;
      }

      id = R.id.txtPolicy;
      TextView txtPolicy = ViewBindings.findChildViewById(rootView, id);
      if (txtPolicy == null) {
        break missingId;
      }

      id = R.id.txtTerms;
      TextView txtTerms = ViewBindings.findChildViewById(rootView, id);
      if (txtTerms == null) {
        break missingId;
      }

      return new LayoutLicenseBinding((ConstraintLayout) rootView, btnAccept, btnCancel, checkTerms,
          dialogTitle, linearLayout2, txtPolicy, txtTerms);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
