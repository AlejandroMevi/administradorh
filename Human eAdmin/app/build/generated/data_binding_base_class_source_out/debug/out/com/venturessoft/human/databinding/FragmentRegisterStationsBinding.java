// Generated by view binder compiler. Do not edit!
package com.venturessoft.human.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.SearchView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.materialswitch.MaterialSwitch;
import com.google.android.material.textfield.MaterialAutoCompleteTextView;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import com.google.android.material.textview.MaterialTextView;
import com.venturessoft.human.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentRegisterStationsBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextInputEditText bssid;

  @NonNull
  public final MaterialButton btnBackEstaciones;

  @NonNull
  public final MaterialButton btnGuardarEstaciones;

  @NonNull
  public final TextInputEditText descestacion;

  @NonNull
  public final FrameLayout frameLMapsNew;

  @NonNull
  public final NestedScrollView headScroll;

  @NonNull
  public final TextInputEditText lat;

  @NonNull
  public final TextInputLayout linearCompany;

  @NonNull
  public final LinearLayout llMapsNew;

  @NonNull
  public final ViewLoadingNewBinding loadingAnimationStationFragment;

  @NonNull
  public final TextInputEditText lon;

  @NonNull
  public final ImageView openSuggestions;

  @NonNull
  public final TextInputEditText rango;

  @NonNull
  public final EditText searchEditext;

  @NonNull
  public final SearchView searchMaps;

  @NonNull
  public final MaterialAutoCompleteTextView selectType;

  @NonNull
  public final MaterialAutoCompleteTextView selectZone;

  @NonNull
  public final MaterialSwitch statusFreeStationNew;

  @NonNull
  public final TextInputLayout textNameEmployee;

  @NonNull
  public final MaterialTextView txtFreeStationNew;

  @NonNull
  public final TextInputLayout txtbssid;

  @NonNull
  public final TextInputLayout txtlat;

  @NonNull
  public final TextInputLayout txtlon;

  @NonNull
  public final TextInputLayout txtrango;

  @NonNull
  public final TextInputLayout txtselectType;

  @NonNull
  public final TextInputLayout txtuuid;

  @NonNull
  public final TextInputEditText uuid;

  private FragmentRegisterStationsBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextInputEditText bssid, @NonNull MaterialButton btnBackEstaciones,
      @NonNull MaterialButton btnGuardarEstaciones, @NonNull TextInputEditText descestacion,
      @NonNull FrameLayout frameLMapsNew, @NonNull NestedScrollView headScroll,
      @NonNull TextInputEditText lat, @NonNull TextInputLayout linearCompany,
      @NonNull LinearLayout llMapsNew,
      @NonNull ViewLoadingNewBinding loadingAnimationStationFragment,
      @NonNull TextInputEditText lon, @NonNull ImageView openSuggestions,
      @NonNull TextInputEditText rango, @NonNull EditText searchEditext,
      @NonNull SearchView searchMaps, @NonNull MaterialAutoCompleteTextView selectType,
      @NonNull MaterialAutoCompleteTextView selectZone,
      @NonNull MaterialSwitch statusFreeStationNew, @NonNull TextInputLayout textNameEmployee,
      @NonNull MaterialTextView txtFreeStationNew, @NonNull TextInputLayout txtbssid,
      @NonNull TextInputLayout txtlat, @NonNull TextInputLayout txtlon,
      @NonNull TextInputLayout txtrango, @NonNull TextInputLayout txtselectType,
      @NonNull TextInputLayout txtuuid, @NonNull TextInputEditText uuid) {
    this.rootView = rootView;
    this.bssid = bssid;
    this.btnBackEstaciones = btnBackEstaciones;
    this.btnGuardarEstaciones = btnGuardarEstaciones;
    this.descestacion = descestacion;
    this.frameLMapsNew = frameLMapsNew;
    this.headScroll = headScroll;
    this.lat = lat;
    this.linearCompany = linearCompany;
    this.llMapsNew = llMapsNew;
    this.loadingAnimationStationFragment = loadingAnimationStationFragment;
    this.lon = lon;
    this.openSuggestions = openSuggestions;
    this.rango = rango;
    this.searchEditext = searchEditext;
    this.searchMaps = searchMaps;
    this.selectType = selectType;
    this.selectZone = selectZone;
    this.statusFreeStationNew = statusFreeStationNew;
    this.textNameEmployee = textNameEmployee;
    this.txtFreeStationNew = txtFreeStationNew;
    this.txtbssid = txtbssid;
    this.txtlat = txtlat;
    this.txtlon = txtlon;
    this.txtrango = txtrango;
    this.txtselectType = txtselectType;
    this.txtuuid = txtuuid;
    this.uuid = uuid;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentRegisterStationsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentRegisterStationsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_register_stations, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentRegisterStationsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bssid;
      TextInputEditText bssid = ViewBindings.findChildViewById(rootView, id);
      if (bssid == null) {
        break missingId;
      }

      id = R.id.btnBackEstaciones;
      MaterialButton btnBackEstaciones = ViewBindings.findChildViewById(rootView, id);
      if (btnBackEstaciones == null) {
        break missingId;
      }

      id = R.id.btnGuardarEstaciones;
      MaterialButton btnGuardarEstaciones = ViewBindings.findChildViewById(rootView, id);
      if (btnGuardarEstaciones == null) {
        break missingId;
      }

      id = R.id.descestacion;
      TextInputEditText descestacion = ViewBindings.findChildViewById(rootView, id);
      if (descestacion == null) {
        break missingId;
      }

      id = R.id.frameLMapsNew;
      FrameLayout frameLMapsNew = ViewBindings.findChildViewById(rootView, id);
      if (frameLMapsNew == null) {
        break missingId;
      }

      id = R.id.headScroll;
      NestedScrollView headScroll = ViewBindings.findChildViewById(rootView, id);
      if (headScroll == null) {
        break missingId;
      }

      id = R.id.lat;
      TextInputEditText lat = ViewBindings.findChildViewById(rootView, id);
      if (lat == null) {
        break missingId;
      }

      id = R.id.linearCompany;
      TextInputLayout linearCompany = ViewBindings.findChildViewById(rootView, id);
      if (linearCompany == null) {
        break missingId;
      }

      id = R.id.llMapsNew;
      LinearLayout llMapsNew = ViewBindings.findChildViewById(rootView, id);
      if (llMapsNew == null) {
        break missingId;
      }

      id = R.id.loadingAnimationStationFragment;
      View loadingAnimationStationFragment = ViewBindings.findChildViewById(rootView, id);
      if (loadingAnimationStationFragment == null) {
        break missingId;
      }
      ViewLoadingNewBinding binding_loadingAnimationStationFragment = ViewLoadingNewBinding.bind(loadingAnimationStationFragment);

      id = R.id.lon;
      TextInputEditText lon = ViewBindings.findChildViewById(rootView, id);
      if (lon == null) {
        break missingId;
      }

      id = R.id.openSuggestions;
      ImageView openSuggestions = ViewBindings.findChildViewById(rootView, id);
      if (openSuggestions == null) {
        break missingId;
      }

      id = R.id.rango;
      TextInputEditText rango = ViewBindings.findChildViewById(rootView, id);
      if (rango == null) {
        break missingId;
      }

      id = R.id.searchEditext;
      EditText searchEditext = ViewBindings.findChildViewById(rootView, id);
      if (searchEditext == null) {
        break missingId;
      }

      id = R.id.searchMaps;
      SearchView searchMaps = ViewBindings.findChildViewById(rootView, id);
      if (searchMaps == null) {
        break missingId;
      }

      id = R.id.selectType;
      MaterialAutoCompleteTextView selectType = ViewBindings.findChildViewById(rootView, id);
      if (selectType == null) {
        break missingId;
      }

      id = R.id.selectZone;
      MaterialAutoCompleteTextView selectZone = ViewBindings.findChildViewById(rootView, id);
      if (selectZone == null) {
        break missingId;
      }

      id = R.id.statusFreeStationNew;
      MaterialSwitch statusFreeStationNew = ViewBindings.findChildViewById(rootView, id);
      if (statusFreeStationNew == null) {
        break missingId;
      }

      id = R.id.textNameEmployee;
      TextInputLayout textNameEmployee = ViewBindings.findChildViewById(rootView, id);
      if (textNameEmployee == null) {
        break missingId;
      }

      id = R.id.txtFreeStationNew;
      MaterialTextView txtFreeStationNew = ViewBindings.findChildViewById(rootView, id);
      if (txtFreeStationNew == null) {
        break missingId;
      }

      id = R.id.txtbssid;
      TextInputLayout txtbssid = ViewBindings.findChildViewById(rootView, id);
      if (txtbssid == null) {
        break missingId;
      }

      id = R.id.txtlat;
      TextInputLayout txtlat = ViewBindings.findChildViewById(rootView, id);
      if (txtlat == null) {
        break missingId;
      }

      id = R.id.txtlon;
      TextInputLayout txtlon = ViewBindings.findChildViewById(rootView, id);
      if (txtlon == null) {
        break missingId;
      }

      id = R.id.txtrango;
      TextInputLayout txtrango = ViewBindings.findChildViewById(rootView, id);
      if (txtrango == null) {
        break missingId;
      }

      id = R.id.txtselectType;
      TextInputLayout txtselectType = ViewBindings.findChildViewById(rootView, id);
      if (txtselectType == null) {
        break missingId;
      }

      id = R.id.txtuuid;
      TextInputLayout txtuuid = ViewBindings.findChildViewById(rootView, id);
      if (txtuuid == null) {
        break missingId;
      }

      id = R.id.uuid;
      TextInputEditText uuid = ViewBindings.findChildViewById(rootView, id);
      if (uuid == null) {
        break missingId;
      }

      return new FragmentRegisterStationsBinding((ConstraintLayout) rootView, bssid,
          btnBackEstaciones, btnGuardarEstaciones, descestacion, frameLMapsNew, headScroll, lat,
          linearCompany, llMapsNew, binding_loadingAnimationStationFragment, lon, openSuggestions,
          rango, searchEditext, searchMaps, selectType, selectZone, statusFreeStationNew,
          textNameEmployee, txtFreeStationNew, txtbssid, txtlat, txtlon, txtrango, txtselectType,
          txtuuid, uuid);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
