// Generated by view binder compiler. Do not edit!
package com.venturessoft.human.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.appcompat.widget.AppCompatTextView;
import androidx.percentlayout.widget.PercentFrameLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import com.google.android.material.textview.MaterialTextView;
import com.venturessoft.human.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentChangePasswordBinding implements ViewBinding {
  @NonNull
  private final PercentFrameLayout rootView;

  @NonNull
  public final Button btnBackChange;

  @NonNull
  public final Button btnChange;

  @NonNull
  public final AppCompatImageView check1;

  @NonNull
  public final AppCompatImageView check2;

  @NonNull
  public final AppCompatImageView check3;

  @NonNull
  public final AppCompatImageView check4;

  @NonNull
  public final AppCompatImageView check5;

  @NonNull
  public final LinearLayout checkValidateCharacter;

  @NonNull
  public final LinearLayout checkValidateMayus;

  @NonNull
  public final LinearLayout checkValidateMinus;

  @NonNull
  public final LinearLayout checkValidateNumber;

  @NonNull
  public final LinearLayout checkValidateSpecialCharacter;

  @NonNull
  public final MaterialTextView filterA;

  @NonNull
  public final MaterialTextView filterB;

  @NonNull
  public final MaterialTextView filterC;

  @NonNull
  public final MaterialTextView filterD;

  @NonNull
  public final AppCompatTextView filterE;

  @NonNull
  public final LinearLayout headerRulesPassword;

  @NonNull
  public final ViewLoadingNewBinding loadingAnimationChagePasswordFragment;

  @NonNull
  public final TextInputLayout materialPassword;

  @NonNull
  public final TextInputEditText newPassword;

  @NonNull
  public final TextInputEditText newPasswordConfirm;

  @NonNull
  public final TextInputEditText passwordActual;

  private FragmentChangePasswordBinding(@NonNull PercentFrameLayout rootView,
      @NonNull Button btnBackChange, @NonNull Button btnChange, @NonNull AppCompatImageView check1,
      @NonNull AppCompatImageView check2, @NonNull AppCompatImageView check3,
      @NonNull AppCompatImageView check4, @NonNull AppCompatImageView check5,
      @NonNull LinearLayout checkValidateCharacter, @NonNull LinearLayout checkValidateMayus,
      @NonNull LinearLayout checkValidateMinus, @NonNull LinearLayout checkValidateNumber,
      @NonNull LinearLayout checkValidateSpecialCharacter, @NonNull MaterialTextView filterA,
      @NonNull MaterialTextView filterB, @NonNull MaterialTextView filterC,
      @NonNull MaterialTextView filterD, @NonNull AppCompatTextView filterE,
      @NonNull LinearLayout headerRulesPassword,
      @NonNull ViewLoadingNewBinding loadingAnimationChagePasswordFragment,
      @NonNull TextInputLayout materialPassword, @NonNull TextInputEditText newPassword,
      @NonNull TextInputEditText newPasswordConfirm, @NonNull TextInputEditText passwordActual) {
    this.rootView = rootView;
    this.btnBackChange = btnBackChange;
    this.btnChange = btnChange;
    this.check1 = check1;
    this.check2 = check2;
    this.check3 = check3;
    this.check4 = check4;
    this.check5 = check5;
    this.checkValidateCharacter = checkValidateCharacter;
    this.checkValidateMayus = checkValidateMayus;
    this.checkValidateMinus = checkValidateMinus;
    this.checkValidateNumber = checkValidateNumber;
    this.checkValidateSpecialCharacter = checkValidateSpecialCharacter;
    this.filterA = filterA;
    this.filterB = filterB;
    this.filterC = filterC;
    this.filterD = filterD;
    this.filterE = filterE;
    this.headerRulesPassword = headerRulesPassword;
    this.loadingAnimationChagePasswordFragment = loadingAnimationChagePasswordFragment;
    this.materialPassword = materialPassword;
    this.newPassword = newPassword;
    this.newPasswordConfirm = newPasswordConfirm;
    this.passwordActual = passwordActual;
  }

  @Override
  @NonNull
  public PercentFrameLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentChangePasswordBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentChangePasswordBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_change_password, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentChangePasswordBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnBackChange;
      Button btnBackChange = ViewBindings.findChildViewById(rootView, id);
      if (btnBackChange == null) {
        break missingId;
      }

      id = R.id.btnChange;
      Button btnChange = ViewBindings.findChildViewById(rootView, id);
      if (btnChange == null) {
        break missingId;
      }

      id = R.id.check1;
      AppCompatImageView check1 = ViewBindings.findChildViewById(rootView, id);
      if (check1 == null) {
        break missingId;
      }

      id = R.id.check2;
      AppCompatImageView check2 = ViewBindings.findChildViewById(rootView, id);
      if (check2 == null) {
        break missingId;
      }

      id = R.id.check3;
      AppCompatImageView check3 = ViewBindings.findChildViewById(rootView, id);
      if (check3 == null) {
        break missingId;
      }

      id = R.id.check4;
      AppCompatImageView check4 = ViewBindings.findChildViewById(rootView, id);
      if (check4 == null) {
        break missingId;
      }

      id = R.id.check5;
      AppCompatImageView check5 = ViewBindings.findChildViewById(rootView, id);
      if (check5 == null) {
        break missingId;
      }

      id = R.id.checkValidateCharacter;
      LinearLayout checkValidateCharacter = ViewBindings.findChildViewById(rootView, id);
      if (checkValidateCharacter == null) {
        break missingId;
      }

      id = R.id.checkValidateMayus;
      LinearLayout checkValidateMayus = ViewBindings.findChildViewById(rootView, id);
      if (checkValidateMayus == null) {
        break missingId;
      }

      id = R.id.checkValidateMinus;
      LinearLayout checkValidateMinus = ViewBindings.findChildViewById(rootView, id);
      if (checkValidateMinus == null) {
        break missingId;
      }

      id = R.id.checkValidateNumber;
      LinearLayout checkValidateNumber = ViewBindings.findChildViewById(rootView, id);
      if (checkValidateNumber == null) {
        break missingId;
      }

      id = R.id.checkValidateSpecialCharacter;
      LinearLayout checkValidateSpecialCharacter = ViewBindings.findChildViewById(rootView, id);
      if (checkValidateSpecialCharacter == null) {
        break missingId;
      }

      id = R.id.filterA;
      MaterialTextView filterA = ViewBindings.findChildViewById(rootView, id);
      if (filterA == null) {
        break missingId;
      }

      id = R.id.filterB;
      MaterialTextView filterB = ViewBindings.findChildViewById(rootView, id);
      if (filterB == null) {
        break missingId;
      }

      id = R.id.filterC;
      MaterialTextView filterC = ViewBindings.findChildViewById(rootView, id);
      if (filterC == null) {
        break missingId;
      }

      id = R.id.filterD;
      MaterialTextView filterD = ViewBindings.findChildViewById(rootView, id);
      if (filterD == null) {
        break missingId;
      }

      id = R.id.filterE;
      AppCompatTextView filterE = ViewBindings.findChildViewById(rootView, id);
      if (filterE == null) {
        break missingId;
      }

      id = R.id.headerRulesPassword;
      LinearLayout headerRulesPassword = ViewBindings.findChildViewById(rootView, id);
      if (headerRulesPassword == null) {
        break missingId;
      }

      id = R.id.loadingAnimationChagePasswordFragment;
      View loadingAnimationChagePasswordFragment = ViewBindings.findChildViewById(rootView, id);
      if (loadingAnimationChagePasswordFragment == null) {
        break missingId;
      }
      ViewLoadingNewBinding binding_loadingAnimationChagePasswordFragment = ViewLoadingNewBinding.bind(loadingAnimationChagePasswordFragment);

      id = R.id.materialPassword;
      TextInputLayout materialPassword = ViewBindings.findChildViewById(rootView, id);
      if (materialPassword == null) {
        break missingId;
      }

      id = R.id.newPassword;
      TextInputEditText newPassword = ViewBindings.findChildViewById(rootView, id);
      if (newPassword == null) {
        break missingId;
      }

      id = R.id.newPasswordConfirm;
      TextInputEditText newPasswordConfirm = ViewBindings.findChildViewById(rootView, id);
      if (newPasswordConfirm == null) {
        break missingId;
      }

      id = R.id.passwordActual;
      TextInputEditText passwordActual = ViewBindings.findChildViewById(rootView, id);
      if (passwordActual == null) {
        break missingId;
      }

      return new FragmentChangePasswordBinding((PercentFrameLayout) rootView, btnBackChange,
          btnChange, check1, check2, check3, check4, check5, checkValidateCharacter,
          checkValidateMayus, checkValidateMinus, checkValidateNumber,
          checkValidateSpecialCharacter, filterA, filterB, filterC, filterD, filterE,
          headerRulesPassword, binding_loadingAnimationChagePasswordFragment, materialPassword,
          newPassword, newPasswordConfirm, passwordActual);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
