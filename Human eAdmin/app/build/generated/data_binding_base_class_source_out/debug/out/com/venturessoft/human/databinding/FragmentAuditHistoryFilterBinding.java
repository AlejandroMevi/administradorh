// Generated by view binder compiler. Do not edit!
package com.venturessoft.human.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.checkbox.MaterialCheckBox;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import com.venturessoft.human.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentAuditHistoryFilterBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MaterialButton btnApply;

  @NonNull
  public final Button btnBackHistoryFilter;

  @NonNull
  public final MaterialCheckBox checkBoxAllEmployees;

  @NonNull
  public final ConstraintLayout constraintLoading;

  @NonNull
  public final TextInputEditText dateFrom;

  @NonNull
  public final TextInputEditText dateUp;

  @NonNull
  public final ViewLoadingNewBinding loadingAnimation;

  @NonNull
  public final ViewLoadingNewBinding loadingAnimationn;

  @NonNull
  public final TextInputEditText numEmploye;

  @NonNull
  public final NestedScrollView scrollView3;

  @NonNull
  public final TextInputLayout tilDateFrom;

  @NonNull
  public final TextInputLayout tilNumEmploye;

  @NonNull
  public final TextInputLayout tildateUp;

  private FragmentAuditHistoryFilterBinding(@NonNull ConstraintLayout rootView,
      @NonNull MaterialButton btnApply, @NonNull Button btnBackHistoryFilter,
      @NonNull MaterialCheckBox checkBoxAllEmployees, @NonNull ConstraintLayout constraintLoading,
      @NonNull TextInputEditText dateFrom, @NonNull TextInputEditText dateUp,
      @NonNull ViewLoadingNewBinding loadingAnimation,
      @NonNull ViewLoadingNewBinding loadingAnimationn, @NonNull TextInputEditText numEmploye,
      @NonNull NestedScrollView scrollView3, @NonNull TextInputLayout tilDateFrom,
      @NonNull TextInputLayout tilNumEmploye, @NonNull TextInputLayout tildateUp) {
    this.rootView = rootView;
    this.btnApply = btnApply;
    this.btnBackHistoryFilter = btnBackHistoryFilter;
    this.checkBoxAllEmployees = checkBoxAllEmployees;
    this.constraintLoading = constraintLoading;
    this.dateFrom = dateFrom;
    this.dateUp = dateUp;
    this.loadingAnimation = loadingAnimation;
    this.loadingAnimationn = loadingAnimationn;
    this.numEmploye = numEmploye;
    this.scrollView3 = scrollView3;
    this.tilDateFrom = tilDateFrom;
    this.tilNumEmploye = tilNumEmploye;
    this.tildateUp = tildateUp;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentAuditHistoryFilterBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentAuditHistoryFilterBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_audit_history_filter, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentAuditHistoryFilterBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnApply;
      MaterialButton btnApply = ViewBindings.findChildViewById(rootView, id);
      if (btnApply == null) {
        break missingId;
      }

      id = R.id.btnBackHistoryFilter;
      Button btnBackHistoryFilter = ViewBindings.findChildViewById(rootView, id);
      if (btnBackHistoryFilter == null) {
        break missingId;
      }

      id = R.id.checkBoxAllEmployees;
      MaterialCheckBox checkBoxAllEmployees = ViewBindings.findChildViewById(rootView, id);
      if (checkBoxAllEmployees == null) {
        break missingId;
      }

      id = R.id.constraintLoading;
      ConstraintLayout constraintLoading = ViewBindings.findChildViewById(rootView, id);
      if (constraintLoading == null) {
        break missingId;
      }

      id = R.id.dateFrom;
      TextInputEditText dateFrom = ViewBindings.findChildViewById(rootView, id);
      if (dateFrom == null) {
        break missingId;
      }

      id = R.id.dateUp;
      TextInputEditText dateUp = ViewBindings.findChildViewById(rootView, id);
      if (dateUp == null) {
        break missingId;
      }

      id = R.id.loadingAnimation;
      View loadingAnimation = ViewBindings.findChildViewById(rootView, id);
      if (loadingAnimation == null) {
        break missingId;
      }
      ViewLoadingNewBinding binding_loadingAnimation = ViewLoadingNewBinding.bind(loadingAnimation);

      id = R.id.loadingAnimationn;
      View loadingAnimationn = ViewBindings.findChildViewById(rootView, id);
      if (loadingAnimationn == null) {
        break missingId;
      }
      ViewLoadingNewBinding binding_loadingAnimationn = ViewLoadingNewBinding.bind(loadingAnimationn);

      id = R.id.numEmploye;
      TextInputEditText numEmploye = ViewBindings.findChildViewById(rootView, id);
      if (numEmploye == null) {
        break missingId;
      }

      id = R.id.scrollView3;
      NestedScrollView scrollView3 = ViewBindings.findChildViewById(rootView, id);
      if (scrollView3 == null) {
        break missingId;
      }

      id = R.id.tilDateFrom;
      TextInputLayout tilDateFrom = ViewBindings.findChildViewById(rootView, id);
      if (tilDateFrom == null) {
        break missingId;
      }

      id = R.id.tilNumEmploye;
      TextInputLayout tilNumEmploye = ViewBindings.findChildViewById(rootView, id);
      if (tilNumEmploye == null) {
        break missingId;
      }

      id = R.id.tildateUp;
      TextInputLayout tildateUp = ViewBindings.findChildViewById(rootView, id);
      if (tildateUp == null) {
        break missingId;
      }

      return new FragmentAuditHistoryFilterBinding((ConstraintLayout) rootView, btnApply,
          btnBackHistoryFilter, checkBoxAllEmployees, constraintLoading, dateFrom, dateUp,
          binding_loadingAnimation, binding_loadingAnimationn, numEmploye, scrollView3, tilDateFrom,
          tilNumEmploye, tildateUp);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
